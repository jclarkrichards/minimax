from random import randint

class GameState(object):
    def __init__(self, state, level):
        self.state = state #represents this state 
        #parent, children, and bestChild  are of type GameState
        self.parent = None
        self.children = []
        self.bestChild = None
        self.level = level #level this state was created on
        self.score = 0
        self.prescore = 0 #an initial score, not a final one
        self.emptyVal = -1

    def isEven(self, value):
        '''Checks whether value is odd or even.  False if odd'''
        if value % 2:
            return False
        return True

    def getBestChildLevel(self):
        '''Get the levels children were created.  We want to win fast.'''
        levels = []
        for child in self.children:
            if child.bestChild is not None:
                levels.append(child.bestChild.level)
            else:
                levels.append(child.level)
        return levels
        
    def getScoreFromChildren(self):
        '''Ask children for scores and choose the best child'''
        scores = [child.score for child in self.children]
        #print scores
        if self.isEven(self.level): #level is even
            self.score = max(scores)
        else: #level is even
            self.score = min(scores)
        
        #More than one child has the same best score
        if scores.count(self.score) > 1:
            #levels = [child.level for child in self.children]
            #print levels
            levels = self.getBestChildLevel()
            level = min(levels)
            
            #If more than one child with best score was created on same level
            if levels.count(level) > 1:
                num = levels.count(level)
                indices = []
                for i in range(len(self.children)):
                    if self.children[i].score == self.score:
                        indices.append(i)
                index = randint(0, len(indices)-1)
                #print scores, levels
                self.bestChild = self.children[indices[index]]
            else:
                #print scores, levels
                index = levels.index(level)
                self.bestChild = self.children[index]
        else:
            index = scores.index(self.score)
            self.bestChild = self.children[index]

    def emptySpaces(self):
        '''Get indices of empty spaces'''
        indices = []
        for i in range(len(self.state)):
            if self.state[i] == self.emptyVal:
                indices.append(i)
        return indices

    def allPiecesMatch(self, i, val):
        '''Check if all pieces at the indices match the val'''
        if self.state[i[0]] == self.state[i[1]] == self.state[i[2]] == val:
            return True
        return False



#==============================================================================
class TicTacToeState(GameState):
    def __init__(self, state):
        GameState.__init__(self, state)
        #state is a list with entries:  1=X, 0=O, -1=Empty space
        self.checkEndState()
        
    def checkWin(self):
        '''Check if either X or O wins'''
        wins = [[0,1,2],[3,4,5],[6,7,8],[0,3,6],
                [1,4,7],[2,5,8],[0,4,8],[2,4,6]]
        xwin = 0
        owin = 0
        for win in wins:
            if self.allPiecesMatch(win, 1):
                xwin += 1
            elif self.allPiecesMatch(win, 0):
                owin += 1
        return xwin, owin

    def getScore(self):
        '''If level is even, O is root.'''
        xwin, owin = self.checkWin()
        
        if xwin == owin == 0 or xwin == owin:
            pass #TIE
        else:
            indices = self.emptySpaces()

            if self.isEven(len(indices)+self.level): #Even so O is root
                if owin:
                    self.score = 1
                else:
                    self.score = -1
            else: #Odd so X is root
                if xwin:
                    self.score = 1
                else:
                    self.score = -1

    def getChildren(self):
        '''Create next states based on current state.  The number of children
        is the same as the number of empty spaces'''
        indices = self.emptySpaces()
        if self.isEven(len(indices)): #Even spaces, place an O
            piece = 0
        else: #odd number of spaces, place an X
            piece = 1

        for index in indices:
            state = self.state[:]
            state[index] = piece
            self.children.append(TicTacToeState(state))
        
    def checkEndState(self):
        '''This is an endstate if there are no more empty spaces'''
        self.end = False
        indices = self.emptySpaces()
        if len(indices) == 0:
            self.end = True
            
        #Also an end state if either X or O wins
        xwin, owin = self.checkWin()
        if xwin or owin:
            self.end = True
                    
    def __repr__(self):
        '''How do we want to represent this object?'''
        XO = []
        for i in range(len(self.state)):
            if self.state[i] == 1:
                XO.append('X')
            elif self.state[i] == 0:
                XO.append('O')
            else:
                XO.append(' ')
        XO = tuple(XO)
        s = "%s|%s|%s\n- - -\n%s|%s|%s\n- - -\n%s|%s|%s" % XO
        return s


#==============================================================================
class Eclipse(GameState):
    def __init__(self, state):
        GameState.__init__(self, state)
        self.emptyVal = 0
        self.sunSilver = 1
        self.sunGold = -1
        self.moonSilver = 2
        self.moonGold = -2
        self.sun = [self.sunSilver, self.sunGold]
        self.moon = [self.moonSilver, self.moonGold]
        #self.pieces = [self.sunSilver, self.sunGold, 
        #               self.moonSilver, self.moonGold]
        self.lines = [[0,1,2],[1,2,3],[4,5,6],[5,6,7],
                      [8,9,10],[9,10,11],[12,13,14],[13,14,15],
                      [0,4,8],[4,8,12],[1,5,9],[5,9,13],
                      [2,6,10],[6,10,14],[3,7,11],[7,11,15],
                      [1,6,11],[0,5,10],[5,10,15],[4,9,14],
                      [2,5,8],[3,6,9],[6,9,12],[7,10,13]]
        
        self.checkEndState()
        
    def checkWin(self):
        '''To win all pieces must be the same and all adjacent spaces
        cannot be empty'''
        sunwin = 0
        moonwin = 0
        
        for win in self.lines:
            for sun in self.sun:
                locked = self.checkLockedPieces(win, sun)
                if locked:
                    sunwin += 1
            for moon in self.moon:
                locked = self.checkLockedPieces(win, moon)
                if locked:
                    moonwin += 1
        return sunwin, moonwin

    def checkEndState(self):
        '''End state if no empty spaces or either player wins'''
        self.end = False
        indices = self.emptySpaces()
        if len(indices) == 0:
            self.end = True
            
        sunwin, moonwin = self.checkWin()
        if sunwin or moonwin:
            self.end = True

    def getChildren(self):
        '''Get all possible children of this state'''
        if self.sunIsRoot():
            moonIndices = self.getPlayerIndices(self.moon)

            if self.anyAdjacentEmpty(moonIndices):
                for mi in moonIndices:
                    flipindices = self.getAdjacentEmpty(mi)
                    for fi in flipindices:
                        empty = self.emptySpaces()
                        empty.remove(fi)
                        empty.append(mi)
                        for ei in empty:
                            for side in self.sun:
                                state = self.state[:]
                                state[fi] = state[mi] * -1
                                state[mi] = 0
                                state[ei] = side
                                self.children.append(Eclipse(state))
            else:
                empty = self.emptySpaces()
                for ei in empty:
                    for side in self.sun:
                        state = self.state[:]
                        state[ei] = side
                        self.children.append(Eclipse(state))

        else:
            sunIndices = self.getPlayerIndices(self.sun)
            if self.anyAdjacentEmpty(sunIndices):
                for si in sunIndices:
                    flipindices = self.getAdjacentEmpty(si)
                    for fi in flipindices:
                        empty = self.emptySpaces()
                        empty.remove(fi)
                        empty.append(si)
                        for ei in empty:
                            for side in self.moon:
                                state = self.state[:]
                                state[fi] = state[si] * -1
                                state[si] = 0
                                state[ei] = side
                                self.children.append(Eclipse(state))
            else:
                empty = self.emptySpaces()
                for ei in empty:
                    for side in self.moon:
                        state = self.state[:]
                        state[ei] = side
                        self.children.append(Eclipse(state))


    def createNewState(self):
        pass

    def getScore(self):
        '''Getting score assumes we have reached a true end state'''
        sunwin, moonwin = self.checkWin()
        if sunwin > 0 and moonwin > 0:
            pass #TIE
        else:
            if self.sunIsRoot(self.level):
                if sunwin:
                    self.score = 1
                elif moonwin:
                    self.score = -1
            else: #Moon is root
                if moonwin:
                    self.score = 1
                elif sunwin:
                    self.score = -1

    def checkLockedPieces(self, indices, val):
        '''Check if indices all match val and those indices are all locked'''
        if self.allPiecesMatch(indices, val):
            adjacents = self.getAdjacentIndices(indices)
            empty = self.emptySpaces()
            for i in adjacents:
                if i in empty:
                    return False
            return True
        return False

    def getAdjacentIndices(self, indices):
        '''Given one or more indices, get a list of adjacent indices not including
        the ones in the given list'''
        adjacents = []
        if len(indices) == 1:
            i = indices[0]
            if i-4 >= 0:
                adjacents.append(i-4)
            if i+4 < len(self.state):
                adjacents.append(i+4)
            if self.onSameRow(i+1, i):
                adjacents.append(i+1)
            if self.onSameRow(i-1, i):
                adjacents.append(i-1)
        else:
            for i in indices:
                adjacents += self.getAdjacentIndices([i])
        adjacents = list(set(adjacents))
        for i in indices:
            if i in adjacents:
                adjacents.remove(i)
        return adjacents

    def onSameRow(self, val1, val2):
        '''Two values are on the same row if their integer division is the same'''
        if val1/4 == val2/4:
            return True
        return False

    def getNumChildren(self):
        '''For this state how many children can it have?'''
        empty = self.emptySpaces()
        numAdjacents = 0
        if self.sunIsRoot():
            moonIndices = self.getPlayerIndices(self.moon)
            for i in moonIndices:
                numAdjacents += len(self.getAdjacentEmpty(i))
        else:
            sunIndices = self.getPlayerIndices(self.sun)
            for i in sunIndices:
                numAdjacents += len(self.getAdjacentEmpty(i))

        if len(empty) == len(self.state):
            numAdjacents = 1
        return 2 * len(empty) * numAdjacents

    def sunIsRoot(self, level=0):
        '''Return True if sun is root, False if moon is root.
        Sun is root if even number of empty spaces on the board'''
        empty = self.emptySpaces()
        if self.isEven(len(empty)-level):
            return True
        return False

    def getPlayerIndices(self, values):
        '''Get indices of players pieces as specified by values'''
        indices = []
        for i in range(len(self.state)):
            for value in values:
                if self.state[i] == value:
                    indices.append(i)
        return indices

    def getAdjacentEmpty(self, index):
        '''Get all adjacent empty indices of specified index'''
        result = []
        adjacent = self.getAdjacentIndices([index])
        empty = self.emptySpaces()
        for el in empty:
            if el in adjacent:
                result.append(el)
        return result

    def anyAdjacentEmpty(self, indices):
        '''Checks all indices and returns True if any adjacent spot is empty'''
        for i in indices:
            values = self.getAdjacentEmpty(i)
            if len(values) > 0:
                return True
        return False

    def pruneChildren(self):
        '''Prune child if prescore is above 4.  Basic and simple, but not the best.'''
        if len(self.children) > 0:
            prescores = [c.prescore for c in self.children]
            #print len(prescores), len(self.children)
            #badkids = []
            for i in range(len(prescores)):
                #print i
                if prescores[i] > 100:
                    print self.level
                    print self.children[i].state
                    self.children = [self.children[i]]
                    break
                #if prescores[i] > 4:
                #    badkids.append(self.children[i])
                
            #for badkid in badkids:
            #    self.children.remove(badkid)

    def sortChildren(self):
        '''Sort children based on prescore.  highest to lowest.  Use bubble sort.'''
        sorted = False
        temp = 0
        while not sorted:
            sorted = True
            for i in range(len(self.children)-1):
                if self.children[i].prescore < self.children[i+1].prescore:
                    temp = self.children[i]
                    self.children[i] = self.children[i+1]
                    self.children[i+1] = temp
                    sorted = False
                

    #def evaluateChildren(self):
    #    '''Evaluate children based on number of flips other player can make'''
    #    if len(self.children) > 0:
    #        if self.sunIsRoot():
    #            for child in self.children:
    #                self.prescore = child.totalNumFlips(True)
    #        else:
    #            for child in self.children:
    #                self.prescore = child.totalNumFlips(False)

    def totalNumFlips(self, evalSun):
        '''Get the total number of possible flips for a player.  Set as prescore'''
        flips = 0
        if evalSun:
            indices = self.getPlayerIndices(self.sun)
        else:
            indices = self.getPlayerIndices(self.moon)
        for i in indices:
            empty = self.getAdjacentEmpty(i)
            flips += len(empty)
        return flips

    def evaluateChildren(self):
        '''Evaluate children based on line scores'''
        if len(self.children) > 0:
            if self.sunIsRoot():
                for child in self.children:
                    for line in self.lines:
                        for side in self.sun:
                            if child.allPiecesMatch(line, side):
                                if child.checkLockedPieces(line, side):
                                    child.prescore += 100
                                else:
                                    child.prescore += 10
                            else:
                                if (child.state[line[0]] == child.state[line[1]] == side or
                                    child.state[line[0]] == child.state[line[2]] == side or
                                    child.state[line[1]] == child.state[line[2]] == side):
                                    child.prescore += 1
            else:
                for child in self.children:
                    val = 0
                    for line in self.lines:
                        for side in self.moon:
                            if child.allPiecesMatch(line, side):
                                if child.checkLockedPieces(line, side):
                                    child.prescore += 100
                                else:
                                    child.prescore += 10
                            else:
                                if (child.state[line[0]] == child.state[line[1]] == side or
                                    child.state[line[0]] == child.state[line[2]] == side or
                                    child.state[line[1]] == child.state[line[2]] == side):
                                    child.prescore += 1
                    
    def earlyMover(self):
        pass

    def __repr__(self):
        pass
    


        
